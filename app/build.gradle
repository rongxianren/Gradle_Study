apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

///演示任务创建的文件
//apply from: 'createTask.gradle'

///演示javaBean用法的文件
//apply from: 'javaBean.gradle'

//onlyIf断言的用法
apply from: 'onlyIf.gradle'


///任务的多种访问方式
//apply from: 'access_and_opration_task.gradle'

sourceSets {

}

android {

    compileSdkVersion 29
    buildToolsVersion '28.0.3'

    ///java编译选项设置
    compileOptions {

    }

    sourceSets {

    }

    /// 声明有顺序关系的
    signingConfigs {
        ///配置默认的签名信息，对生成的App签名

        release {
            storeFile file(storeFileCN)
            storePassword storePasswordCN
            keyAlias keyAliasCN
            keyPassword keyPasswordCN
        }

        custom {
            storeFile file(storeFileCN)
            storePassword storePasswordCN
            keyAlias keyAliasCN
            keyPassword keyPasswordCN
        }
    }

    defaultConfig {
        applicationId "com.rongxianren.gradle_study"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.custom
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            applicationIdSuffix ".debug"
        }

        custom {

        }
    }

    flavorDimensions "abi", 'version'

    productFlavors {
        free {
            dimension "version"
            applicationId "com.app.free"
            manifestPlaceholders = [price: 0]
            buildConfigField("String", "dimension", "version")
            resValue 'string', 'version_tips', '这是免费的版本'
        }

        paid {
            dimension "version"
            applicationId "com.app.paid"
            manifestPlaceholders = [price: 100]
            buildConfigField("String", "dimension", "version")

            resValue 'string', 'version_tips', '这是收费的版本'
        }

        arm {
            dimension "abi"
            buildConfigField("String", "dimension", '"abi"')
        }

        x86 {
            dimension "abi"
            buildConfigField("String", "dimension", '"abi"')
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')
                    && 'release' == variant.buildType.name) {
                ///productFlavors[n] 如果productFlavors 中配置了 dimension 那么productFlavors.size>1
                def apkFile = "${project.name}_${variant.productFlavors[0].name}${variant.productFlavors[1].name}_${variant.versionName}_${buildTime()}.apk"
                output.outputFileName = apkFile
            }
        }
    }
}


def buildTime() {
    def date = new Date()
    def formatDate = date.format('yyyyMMdd')
    formatDate
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}


/****************gradle获取环境变量中设置的值******************/
task getValueFromEnv {
    def java_home = System.getenv("JAVA_HOME")
    println "环境变量测试 --- java_home = $java_home"
}

//getValueFromEnv.dependsOn(':app:assembleX86FreeRelease')
getValueFromEnv.dependsOn ':app:assembleX86FreeRelease'
/**********************************/