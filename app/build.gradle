apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29


    /// 声明有顺序关系的
    signingConfigs {
        ///配置默认的签名信息，对生成的App签名
        debug {
            keyAlias "MyDebug"
        }

        release {
            keyAlias "MyRelease"
        }

        custom {

        }
    }


    defaultConfig {
        applicationId "com.rongxianren.gradle_study"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.custom
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            applicationIdSuffix ".debug"
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

task HelloJavaBean() {
    Person person = new Person()

    person.name = "张三"
    person.age = 10

    println "person name is $person.name"
}


class Person {
    String name = ""
    int age = 10
}


/**********************************/
///only 断言的用法
//// 需求首发渠道只有 百度 和 应用宝

tasks.withType(Test) {
    enableAssertions = true
}

final String BUILD_APPS_ALL = "all"
final String BUILD_APPS_SHOUFA = "shoufa"
final String BUILD_APPS_EXCLUDE_SHOUFA = "exclude_shoufa"


task ex48QQRelease {
    println "打应用宝的包"
}

task ex48BaiduRelease {
    println "打百度的包"
}

task ex48HuaWeiRelease {
    println "打华为的包"
}

task ex48MiuiRelease {
    println("打Miui的包")
    description " --- 打miui的包"
}


task myBuild {
    group BasePlugin.BUILD_GROUP
    description "打渠道包"
}

myBuild.dependsOn ex48QQRelease, ex48BaiduRelease, ex48HuaWeiRelease, ex48MiuiRelease

ex48QQRelease.onlyIf {

    println "这个是断言"
    def excute = false
    if (project.hasProperty("build_apps")) {
        Object buildApps = project.property("build_apps")
        if (BUILD_APPS_SHOUFA.equals(buildApps)
                || BUILD_APPS_ALL.equals(buildApps)) {
            excute = true
        }
    }
    println "这个是断言 excute = $excute"
    excute
}

ex48BaiduRelease.onlyIf {
    def excute = false
    if (project.hasProperty("build_apps")) {
        Object buildApps = project.property("build_apps")
        if (BUILD_APPS_SHOUFA == buildApps
                || BUILD_APPS_ALL == buildApps) {
            excute = true
        }
    }
    excute
}

ex48HuaWeiRelease.onlyIf {
    def excute = false
    if (project.hasProperty("build_apps")) {
        Object buildApps = project.property("build_apps")
        if (BUILD_APPS_EXCLUDE_SHOUFA.equals(buildApps)
                || BUILD_APPS_ALL.equals(buildApps)) {
            excute = true
        }
    }
    excute
}

ex48MiuiRelease.onlyIf {
    def excute = false
    if (project.hasProperty("build_apps")) {
        Object buildApps = project.property("build_apps")
        if (BUILD_APPS_EXCLUDE_SHOUFA.equals(buildApps)
                || BUILD_APPS_ALL.equals(buildApps)) {
            excute = true
        }
    }
    println "ex48MiuiRelease 这个是断言 excute = $excute"
    excute
}

/**********************************/